Terminales = { eof  let  id  ;  if  (  )  {   }  while % do else
            function return input print int boolean string and >  =
            cad num  ++  , &&  true false  }
NoTerminales = {  START  SENA  CTE  INC  EXP    EXPX  VALUE  XPX  ASIGN  DECL   DECLX  TD  TDX  INOUT
                 WILE  SENB  BODY  IFX  FCALL  FCALLX  RX  IDX	IFAX   FUN  PARM  PARAMX EXPA }

Axioma = START

Producciones = {

START -> SENA START ////1 > Sentencias A
START -> FUN START ////2 > Dec funciones
START -> eof ////3

CTE -> cad ////4 
CTE -> num ////5
CTE -> true ////6
CTE -> false ////7

INC -> ++ id //// 8

EXP -> VALUE EXPX ////9 > 
EXP -> INC EXPX ////10 > 

EXPX -> > EXP  ////11
EXPX -> &&  EXP ////12
EXPX -> % EXP ////13
EXPX -> lambda ////14

VALUE -> id XPX ////15
VALUE -> CTE    ////16
VALUE -> ( EXP ) ////17


XPX -> ( FCALL ) ////18
XPX -> lambda   ////19

ASIGN ->  = EXP ; ////20

DECL -> let id TD DECLX ; //// 21

DECLX -> ASIGN //// 22
DECLX -> lambda //// 23

TD -> int //// 24 tipos de datos
TD -> string //// 25
TD -> boolean   //// 26

TDX -> TD   //// 27
TDX -> lambda   //// 28

INOUT -> print EXP ;     //// 29
INOUT -> input id ;     //// 30

SENA -> IFX     //// 31 > Condicionales
SENA -> DECL    //// 32 > Declaraciones
SENA -> do { BODY } WILE    //// 33 > do wile
WILE -> while ( EXP ) ;     //// 34
SENA -> SENB                //// 35

SENB -> id IDX              //// 36
SENB -> INOUT               //// 37
SENB -> return RX ;         //// 38
SENB -> INC ;               //// 39

BODY -> SENA BODY           //// 40
BODY -> lambda              //// 41

IFX -> if ( EXP ) IFAX      //// 42

IFAX -> { BODY } //// 43
IFAX -> SENB    //// 44


FCALL -> EXP FCALLX     //// 45
FCALL -> lambda         //// 46
FCALLX -> , EXP FCALLX  //// 47
FCALLX -> lambda         //// 48

RX -> EXP               //// 49
RX -> lambda            //// 50

IDX -> ASIGN          //// 51
IDX -> ( FCALL ) ;      //// 52

FUN -> function id TDX ( PARM ) { BODY }    //// 53

PARAM -> TD id PARAMX     //// 54
PARAM -> lambda      //// 55
PARAMX -> , TD id PARAMX  //// 56
PARAMX -> lambda ////Â 57


}